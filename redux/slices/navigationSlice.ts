import { /* createAsyncThunk,  */createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState,/*  AppThunk  */ } from '../../redux/store';
/* import { current } from '@reduxjs/toolkit' */

import { DocumentData } from "firebase/firestore";

interface CheckProps {
    id: string;
    checked: string
}

export interface NavigationState {

    selectedBuilding: DocumentData,
    selectedBuildings: DocumentData[]

    buildingsData: DocumentData[],
    landlordsData: DocumentData[],

    modalAdjustment: boolean,
    addBuildingDialogOpen: boolean,

}

const initialState: NavigationState = {

    selectedBuilding: {},
    selectedBuildings: [],

    buildingsData: [],
    landlordsData: [],

    modalAdjustment: false,
    addBuildingDialogOpen: false,

};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const navigationSlice = createSlice({
    name: 'navigation',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        setSelectedBuilding: (state, action: PayloadAction<DocumentData>) => {
            state.selectedBuilding = action.payload;
        },
        setBuildingsData: (state, action: PayloadAction<DocumentData[]>) => {
            state.buildingsData = action.payload;
        },
        addSelectedBuilding: (state, action: PayloadAction<DocumentData>) => {
            state.selectedBuildings.push(action.payload)
        },
        removeSelectedBuilding: (state, action: PayloadAction<string>) => {
            const temp = state.selectedBuildings.filter(building => building.id !== action.payload)
            // "Mutate" the existing state to save the new array
            state.selectedBuildings = temp
        },
        setLandlordsData: (state, action: PayloadAction<DocumentData[]>) => {
            state.landlordsData = action.payload;
        },
        setModalAdjustment: (state, action: PayloadAction<boolean>) => {
            state.modalAdjustment = action.payload;
        },
        setAddBuildingDialog: (state, action: PayloadAction<boolean>) => {
            state.addBuildingDialogOpen = action.payload;
        },


    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    /* extraReducers: (builder) => {
        builder
            .addCase(incrementAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(incrementAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                state.value += action.payload;
            });
    }, */
});

export const { setSelectedBuilding, setBuildingsData, addSelectedBuilding, setLandlordsData, setModalAdjustment, setAddBuildingDialog } = navigationSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export const selectSelectedBuilding = (state: RootState) => state.navigation.selectedBuilding;



// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
/* export const incrementIfOdd = (amount: number): AppThunk => (
    dispatch,
    getState
) => {
    const currentValue = selectCount(getState());
    if (currentValue % 2 === 1) {
        dispatch(incrementByAmount(amount));
    }
}; */

export default navigationSlice.reducer;
